import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import MultipleLocator

data = 'CoraML'
Adj = 'At'

# Data
if data == 'CiteSeer' and Adj == 'A':
    layers = list(range(1, 21))
    Ak_mean = [63.0, 59.9, 58.3, 58.6, 58.5, 58.6, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5]
    layer_mean = [63.1, 60.5, 59.5, 57.1, 54.8, 54.1, 51.7, 53.1, 47.3, 43.9, 40.9, 40.0, 36.1, 30.1, 25.2, 29.6, 22.5, 23.6, 22.8, 22.3]
    Ak_vari = [1.9, 3.4, 2.1, 2.0, 2.0, 1.8, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    layer_vari = [2.0, 2.6, 2.3, 2.6, 3.8, 3.4, 3.8, 2.9, 3.6, 2.8, 2.6, 3.3, 7.1, 6.4, 5.9, 7.2, 3.3, 4.5, 2.0, 1.9]
    density = [0.0720, 0.0985, 0.1105, 0.1146, 0.1159, 0.1163, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164]

elif data == 'CiteSeer' and Adj == 'At':
    layers = list(range(1, 21))
    Ak_mean = [59.6, 57.8, 56.8, 56.5, 56.3, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4, 56.4]
    layer_mean = [59.6, 56.7, 56.0, 53.7, 51.8, 50.2, 49.7, 47.3, 43.8, 38.5, 32.5, 34.6, 31.9, 25.7, 25.3, 21.0, 19.8, 19.6, 19.9, 19.7]
    Ak_vari = [2.4, 3.7, 3.2, 2.8, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9]
    layer_vari = [2.2, 1.4, 1.9, 2.9, 2.3, 2.7, 2.9, 3.4, 6.3, 4.6, 3.4, 4.5, 6.2, 6.0, 7.4, 4.0, 1.0, 1.5, 1.2, 1.5]
    density = [0.0720, 0.0985, 0.1105, 0.1146, 0.1159, 0.1163, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164, 0.1164]

elif data == 'CiteSeer' and Adj == 'Undirect':
    layers = list(range(1, 21))
    Ak_mean = [65.4, 66.0, 65.2, 65.1, 64.7, 63.7, 62.0, 60.1, 58.1, 56.0, 53.5, 50.4, 45.8, 41.4, 37.4, 35.7, 35.3, 35.0, 34.7, 35.0]
    layer_mean = [59.6, 56.5, 55.7, 54.1, 50.6, 51.1, 49.0, 48.6, 44.3, 35.8, 32.9, 33.5, 31.2, 26.8, 24.3, 22.9, 20.2, 19.7, 19.6, 19.4]
    Ak_vari = [3.2, 2.2, 0.8, 0.9, 1.0, 1.2, 1.4, 2.6, 1.7, 1.2, 1.6, 3.3, 6.6, 6.7, 5.7, 4.0, 3.6, 2.6, 2.0, 2.1]
    layer_vari = [2.4, 1.7, 2.1, 2.4, 3.2, 2.7, 4.4, 3.8, 4.1, 4.6, 6.0, 4.9, 5.8, 5.7, 5.4, 6.5, 1.7, 0.9, 1.2, 1.4]
    density = [0.1129, 0.4571, 1.3174, 2.9108, 5.2723, 8.3315, 12.1282, 16.7428, 21.8300, 26.6601, 30.7861, 34.0137, 36.4167, 38.0783, 39.1216, 39.7669, 40.1521, 40.3788, 40.5056, 40.5726]

elif data == 'CoraML' and Adj == 'At':
    layers = list(range(1, 21))
    Ak_mean = [77.4, 76.4, 74.5, 73.4, 71.1, 69.9, 68.1, 68.4, 66.8, 66.1, 64.9, 64.5, 64.2, 64.2, 64.3, 64.0, 63.9, 62.2, 61.4, 61.1]
    layer_mean = [77.4, 75.8, 74.3, 73.0, 70.7, 70.2, 67.7, 63.1, 60.5, 54.7, 55.0, 55.1, 53.2, 43.6, 32.5, 31.3, 29.8, 30.1, 28.9, 28.6]
    Ak_vari = [1.7, 1.8, 1.8, 1.5, 1.2, 1.3, 1.6, 1.5, 1.6, 1.9, 2.2, 2.0, 1.9, 1.5, 1.6, 1.6, 1.8, 1.5, 2.3, 2.3]
    layer_vari = [1.7, 2.0, 1.9, 2.0, 2.4, 2.4, 2.4, 3.4, 3.3, 3.7, 3.6, 3.5, 7.9, 11.6, 12.6, 9.7, 5.5, 3.9, 3.7, 3.7]
    density = [0.1272, 0.3110, 0.5627, 0.8566, 1.1754, 1.5044, 1.8377, 2.1793, 2.5173, 2.8398, 3.1323, 3.3888, 3.6172, 3.8162, 3.9746, 4.1075, 4.2237, 4.3256, 4.4066, 4.4641]

elif data == 'CoraML' and Adj == 'A':
    layers = list(range(1, 21))
    Ak_mean = [73.2, 71.4, 69.6, 67.9, 67.0, 66.2, 65.4, 65.3, 64.2, 64.3, 64.5, 64.8, 64.1, 64.4, 64.8, 64.4, 64.8, 64.7, 64.6, 64.4]
    layer_mean = [73.2, 72.3, 70.5, 68.5, 65.2, 64.2, 61.7, 54.7, 44.6, 39.4, 34.8, 32.1, 26.3, 23.6, 21.7, 22.1, 22.2, 22.0, 21.9, 22.3]
    Ak_vari = [1.5, 1.7, 1.9, 2.1, 2.2, 2.2, 2.6, 2.7, 2.5, 3.1, 3.6, 3.8, 4.2, 3.8, 3.6, 3.6, 3.3, 3.1, 3.3, 3.0]
    layer_vari = [1.5, 1.8, 2.4, 3.6, 4.5, 3.4, 3.7, 3.4, 6.1, 5.5, 5.8, 8.7, 8.3, 5.7, 4.1, 4.6, 5.5, 5.6, 5.3, 6.1]
    density = [0.1272, 0.3110, 0.5627, 0.8566, 1.1754, 1.5044, 1.8377, 2.1793, 2.5173, 2.8398, 3.1323, 3.3888, 3.6172, 3.8162, 3.9746, 4.1075, 4.2237, 4.3256, 4.4066, 4.4641]

elif data == 'CoraML' and Adj == 'Undirect':
    layers = list(range(1, 21))
    Ak_mean = [79.3, 81.0, 75.8, 59.5, 39.8, 29.6, 24.7, 23.8, 27.0, 24.9, 22.6, 21.5, 20.4, 19.0, 19.1, 19.1, 19.2, 19.2, 19.2, 19.2]
    layer_mean = [79.3, 82.0, 81.2, 80.6, 79.4, 79.4, 77.0, 69.5, 66.6, 60.2, 43.2, 41.8, 40.4, 40.0, 40.8, 39.1, 40.4, 41.3, 40.6, 41.2]
    Ak_vari = [1.6, 1.2, 1.3, 4.0, 3.9, 2.7, 4.4, 5.6, 6.3, 4.8, 4.7, 4.8, 4.8, 5.2, 5.2, 5.3, 5.3, 5.3, 5.3, 5.3]
    layer_vari = [1.6, 1.5, 2.1, 1.6, 1.3, 1.9, 1.8, 2.9, 6.6, 12.2, 8.8, 3.8, 4.2, 3.7, 3.1, 3.2, 2.5, 3.0, 3.9, 3.4]
    density = [0.2153, 2.4303, 9.8736, 29.7966, 53.6806, 70.6800, 79.9008, 84.3950, 86.4544, 87.4206, 87.8299, 87.9747, 88.0235, 88.0388, 88.0428, 88.0433, 88.0433, 88.0433, 88.0433, 88.0433]

elif data == 'Telegram' and Adj == 'Undirect':
    layers = list(range(1, 21))
    Ak_mean = [37.6, 35.8, 36.8, 36.0, 37.6, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0,38.0, 38.0, 38.0, 38.0, 38.0]
    layer_mean = [37.6, 83.6, 83.8, 88.4, 87.0, 87.4, 88.6, 88.0, 89.6, 87.2,87.6, 87.4, 88.2, 87.6, 86.8, 85.8, 87.2, 88.4, 88.4, 87.6]
    Ak_vari = [8.7, 3.7, 1.9, 4.4, 1.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    layer_vari = [8.7, 5.9, 7.2, 4.7, 4.1, 4.4, 3.1, 2.8, 4.4, 2.5,  3.9, 3.0, 3.2, 4.2, 4.7, 8.3, 4.8, 3.6, 4.5, 3.6]
    density = [27.4835, 90.5373, 98.4007, 99.3569, 99.9800, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000, 100.0000]

elif data == 'Telegram' and Adj == 'A':
    layers = list(range(1, 21))
    Ak_mean = [43.0, 41.6, 39.6, 40.2, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8, 39.8]
    layer_mean = [43.0, 60.4, 62.2, 63.8, 64.2, 64.6, 63.6, 65.0, 63.8, 63.0, 65.4, 65.2, 65.6, 65.8, 65.4, 65.6, 67.6, 67.4, 65.8, 67.0]
    Ak_vari = [5.4, 6.1, 4.1, 2.0, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8]
    layer_vari = [5.4, 3.5, 4.8, 6.3, 5.7, 4.4, 5.8, 5.3, 5.8, 3.7, 4.7, 4.2, 3.7, 5.3, 3.3, 3.1, 4.1, 3.7, 4.6, 2.5]
    density = [15.2553, 45.3511, 57.8376, 59.9417, 60.1233, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316]

elif data == 'Telegram' and Adj == 'At':
    layers = list(range(1, 21))
    Ak_mean = [43.4, 45.8, 48.6, 45.8, 46.0, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2, 45.2]
    layer_mean = [43.4, 60.6, 64.2, 61.6, 64.4, 65.4, 62.4, 62.2, 63.6, 63.4, 62.6, 62.2, 64.2, 63.6, 65.6, 64.0, 66.8, 66.4, 66.4, 66.0]
    Ak_vari = [5.7, 5.5, 5.8, 6.4, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7, 5.7]
    layer_vari = [5.7, 8.3, 7.1, 8.2, 3.9, 6.8, 7.4, 6.2, 7.2, 7.5, 6.3, 6.4, 6.8, 6.0, 6.4, 5.7, 7.7, 7.7, 6.2, 8.0]
    density = [15.2553, 45.3511, 57.8376, 59.9417, 60.1233, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316, 60.1316]

# Calculate standard error from variance
std_err_1 = np.sqrt(layer_vari)
std_err_2 = np.sqrt(Ak_vari)

# Create figure
plt.figure(figsize=(10, 6))

# Create first y-axis and plot accuracy data
ax1 = plt.gca()
ax1.errorbar(layers, layer_mean, yerr=std_err_1, fmt='bo-', label='Growing Layer', capsize=3, markersize=5)
ax1.errorbar(layers, Ak_mean, yerr=std_err_2, fmt='rs-', label='Growing k', capsize=3, markersize=5)
ax1.set_xlabel('Layers or k', fontsize=14)  # Increase x-axis label font size
ax1.set_ylabel('Accuracy (%)', fontsize=14)

ax1.xaxis.set_major_locator(MultipleLocator(1))  # Set x-axis grid to every 1 unit
ax1.yaxis.set_major_locator(MultipleLocator(5))

# Create second y-axis and plot density
ax2 = ax1.twinx()
density_line = ax2.plot(layers, np.array(density)/100, 'k-', label='Density', marker='d', markersize=5)
ax2.set_ylabel('Density', fontsize=14)

# Format density axis as percentage
ax2.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{x:.2%}'))

# Combine legends properly
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = density_line, ['Density']
ax1.legend(lines1 + lines2, labels1 + labels2,
          loc='upper right', bbox_to_anchor=(1, 0.75))

# Add grid
ax1.grid(True, alpha=0.1)

plt.title(data + ' with ' + Adj+ ': Accuracy trend with growing layer or k in k-hop neighbors', fontsize=14)

# Adjust layout to prevent label cutoff
plt.tight_layout()

# Save the figure
plt.savefig(data + ' with ' + Adj+ ': Accuracy trend with growing layer or k in k-hop neighbors.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()